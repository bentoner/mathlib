/-
Copyright (c) 2019 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison, Justus Springer
-/
import topology.category.Top.open_nhds
import topology.sheaves.presheaf
import topology.sheaves.sheaf_condition.unique_gluing
import category_theory.limits.types

/-!
# Stalks

For a presheaf `F` on a topological space `X`, valued in some category `C`, the *stalk* of `F`
at the point `x : X` is defined as the colimit of the following functor

nbhds x ‚•§ opens X ‚•§ C

where the functor on the left is the inclusion of categories and the functor on the right is `F`.
For an open neighborhood `U` of `x`, we define the map `F.germ x : F.obj (op U) ‚ü∂ F.stalk x` as the
canonical morphism into this colimit.

For a map `f : X ‚ü∂ Y` between topological spaces, we define `stalk_pushforward` as the induced map
on the stalks `(f _* ‚Ñ±).stalk (f x) ‚ü∂ ‚Ñ±.stalk x`.

Furhtermore, for a morphism of presheaves `f : F ‚ü∂ G` (over a fixed space `X`), we define
`stalk_map x f` as the induced map on the stalks `F.stalk x ‚ü∂ G.stalk x`. For a map between
`Type`-valued sheaves, we show in `is_iso_of_stalk_maps_iso` that if all stalk_maps of `f` are
isomorphisms, then `f` must be an isomorphism.

-/

noncomputable theory

universes v u v' u'

open category_theory
open Top
open category_theory.limits
open topological_space
open opposite

variables {C : Type u} [category.{v} C]

variables [has_colimits.{v} C]

variables {X Y Z : Top.{v}}

namespace Top.presheaf

variables (C)
/-- Stalks are functorial with respect to morphisms of presheaves over a fixed `X`. -/
def stalk_functor (x : X) : X.presheaf C ‚•§ C :=
((whiskering_left _ _ C).obj (open_nhds.inclusion x).op) ‚ãô colim

variables {C}

/--
The stalk of a presheaf `F` at a point `x` is calculated as the colimit of the functor
nbhds x ‚•§ opens F.X ‚•§ C
-/
def stalk (‚Ñ± : X.presheaf C) (x : X) : C :=
(stalk_functor C x).obj ‚Ñ± -- -- colimit ((open_nhds.inclusion x).op ‚ãô ‚Ñ±)

@[simp] lemma stalk_functor_obj (‚Ñ± : X.presheaf C) (x : X) :
  (stalk_functor C x).obj ‚Ñ± = ‚Ñ±.stalk x := rfl

/--
The germ of a section of a presheaf over an open at a point of that open.
-/
def germ (F : X.presheaf C) {U : opens X} (x : U) : F.obj (op U) ‚ü∂ stalk F x :=
colimit.Œπ ((open_nhds.inclusion x.1).op ‚ãô F) (op ‚ü®U, x.2‚ü©)

/-- For a `Type` valued presheaf, every point in a stalk is a germ. -/
lemma germ_exist (F : X.presheaf (Type v)) (x : X) (t : stalk F x) :
  ‚àÉ (U : opens X) (m : x ‚àà U) (s : F.obj (op U)), F.germ ‚ü®x, m‚ü© s = t :=
begin
  obtain ‚ü®U, s, e‚ü© := types.jointly_surjective _ (colimit.is_colimit _) t,
  revert s e,
  rw [(show U = op (unop U), from rfl)],
  generalize : unop U = V, clear U,
  cases V with V m,
  intros s e,
  exact ‚ü®V, m, s, e‚ü©,
end

lemma germ_eq (F : X.presheaf (Type v)) {U V : opens X} (x : X) (mU : x ‚àà U) (mV : x ‚àà V)
  (s : F.obj (op U)) (t : F.obj (op V))
  (h : germ F ‚ü®x, mU‚ü© s = germ F ‚ü®x, mV‚ü© t) :
  ‚àÉ (W : opens X) (m : x ‚àà W) (iU : W ‚ü∂ U) (iV : W ‚ü∂ V), F.map iU.op s = F.map iV.op t :=
begin
  erw types.filtered_colimit.colimit_eq_iff at h,
  rcases h with ‚ü®W, iU, iV, e‚ü©,
  exact ‚ü®(unop W).1, (unop W).2, iU.unop, iV.unop, e‚ü©,
end

@[simp] lemma germ_res (F : X.presheaf C) {U V : opens X} (i : U ‚ü∂ V) (x : U) :
  F.map i.op ‚â´ germ F x = germ F (i x : V) :=
let i' : (‚ü®U, x.2‚ü© : open_nhds x.1) ‚ü∂ ‚ü®V, (i x : V).2‚ü© := i in
colimit.w ((open_nhds.inclusion x.1).op ‚ãô F) i'.op

@[simp] lemma germ_res_apply (F : X.presheaf (Type v)) {U V : opens X} (i : U ‚ü∂ V)
  (x : U) (f : F.obj (op V)) :
  germ F x (F.map i.op f) = germ F (i x : V) f :=
let i' : (‚ü®U, x.2‚ü© : open_nhds x.1) ‚ü∂ ‚ü®V, (i x : V).2‚ü© := i in
congr_fun (colimit.w ((open_nhds.inclusion x.1).op ‚ãô F) i'.op) f

/-- A variant when the open sets are written in `(opens X)·µí·µñ`. -/
@[simp] lemma germ_res_apply' (F : X.presheaf (Type v)) {U V : (opens X)·µí·µñ} (i : V ‚ü∂ U)
  (x : unop U) (f : F.obj V) :
  germ F x (F.map i f) = germ F (i.unop x : unop V) f :=
let i' : (‚ü®unop U, x.2‚ü© : open_nhds x.1) ‚ü∂ ‚ü®unop V, (i.unop x : unop V).2‚ü© := i.unop in
congr_fun (colimit.w ((open_nhds.inclusion x.1).op ‚ãô F) i'.op) f

section
local attribute [instance] concrete_category.has_coe_to_sort concrete_category.has_coe_to_fun

@[ext]
lemma germ_ext {D : Type u} [category.{v} D] [concrete_category D] [has_colimits D]
  (F : X.presheaf D)
  {U V : opens X} {x : X} {hxU : x ‚àà U} {hxV : x ‚àà V}
  (W : opens X) (hxW : x ‚àà W) (iWU : W ‚ü∂ U) (iWV : W ‚ü∂ V)
  {sU : F.obj (op U)} {sV : F.obj (op V)}
  (ih : F.map iWU.op sU = F.map iWV.op sV) :
  F.germ ‚ü®x, hxU‚ü© sU = F.germ ‚ü®x, hxV‚ü© sV :=
by erw [‚Üê F.germ_res iWU ‚ü®x, hxW‚ü©,
    ‚Üê F.germ_res iWV ‚ü®x, hxW‚ü©, coe_comp, coe_comp, ih]

end

lemma stalk_hom_ext (F : X.presheaf C) {x} {Y : C} {f‚ÇÅ f‚ÇÇ : F.stalk x ‚ü∂ Y}
  (ih : ‚àÄ (U : opens X) (hxU : x ‚àà U), F.germ ‚ü®x, hxU‚ü© ‚â´ f‚ÇÅ = F.germ ‚ü®x, hxU‚ü© ‚â´ f‚ÇÇ) : f‚ÇÅ = f‚ÇÇ :=
colimit.hom_ext $ Œª U, by { op_induction U, cases U with U hxU, exact ih U hxU }

lemma section_ext (F : sheaf (Type v) X) (U : opens X) (s t : F.presheaf.obj (op U)) :
  (‚àÄ x : U, F.presheaf.germ x s = F.presheaf.germ x t) ‚Üí s = t :=
begin
  intro h,
  -- We use `germ_eq` and the axiom of choice, to pick for every point `x` a neighbourhood
  -- `V`, such that the restrictions of `s` and `t` to `V` coincide. Since a restriction
  -- map `V ‚ü∂ U` is *data* (lives in `Type`, not `Prop`), we encode all of this as a dependent
  -- pair (sigma type)
  let V : Œ† (x : U), Œ£ (V : open_nhds x.1),
      { iVU : V.1 ‚ü∂ U // F.presheaf.map iVU.op s = F.presheaf.map iVU.op t } := Œª x, by {
    choose V m iVU‚ÇÄ iVU‚ÇÅ heq using (F.presheaf.germ_eq x.1 x.2 x.2 s t (h x)),
    refine ‚ü®‚ü®V,m‚ü©,iVU‚ÇÄ,_‚ü©,
    convert heq,
  },
  refine F.eq_of_locally_eq' (Œª x, (V x).1.1) U (Œª x, (V x).2.1) _ s t (Œª x, (V x).2.2),
  -- Here, it remains to show that the choosen neighborhoods really define a cover of `U`
  intros x hxU,
  rw [subtype.val_eq_coe, opens.mem_coe, opens.mem_supr],
  exact ‚ü®‚ü®x,hxU‚ü©,(V ‚ü®x,hxU‚ü©).1.2‚ü©,
end

variables (C)

def stalk_pushforward (f : X ‚ü∂ Y) (‚Ñ± : X.presheaf C) (x : X) : (f _* ‚Ñ±).stalk (f x) ‚ü∂ ‚Ñ±.stalk x :=
begin
  -- This is a hack; Lean doesn't like to elaborate the term written directly.
  transitivity,
  swap,
  exact colimit.pre _ (open_nhds.map f x).op,
  exact colim.map (whisker_right (nat_trans.op (open_nhds.inclusion_map_iso f x).inv) ‚Ñ±),
end

-- Here are two other potential solutions, suggested by @fpvandoorn at
-- <https://github.com/leanprover-community/mathlib/pull/1018#discussion_r283978240>
-- However, I can't get the subsequent two proofs to work with either one.

-- def stalk_pushforward (f : X ‚ü∂ Y) (‚Ñ± : X.presheaf C) (x : X) :
--   (f _* ‚Ñ±).stalk (f x) ‚ü∂ ‚Ñ±.stalk x :=
-- colim.map ((functor.associator _ _ _).inv ‚â´
--   whisker_right (nat_trans.op (open_nhds.inclusion_map_iso f x).inv) ‚Ñ±) ‚â´
-- colimit.pre ((open_nhds.inclusion x).op ‚ãô ‚Ñ±) (open_nhds.map f x).op

-- def stalk_pushforward (f : X ‚ü∂ Y) (‚Ñ± : X.presheaf C) (x : X) :
--   (f _* ‚Ñ±).stalk (f x) ‚ü∂ ‚Ñ±.stalk x :=
-- (colim.map (whisker_right (nat_trans.op (open_nhds.inclusion_map_iso f x).inv) ‚Ñ±) :
--   colim.obj ((open_nhds.inclusion (f x) ‚ãô opens.map f).op ‚ãô ‚Ñ±) ‚ü∂ _) ‚â´
-- colimit.pre ((open_nhds.inclusion x).op ‚ãô ‚Ñ±) (open_nhds.map f x).op

namespace stalk_pushforward
local attribute [tidy] tactic.op_induction'

@[simp] lemma id (‚Ñ± : X.presheaf C) (x : X) :
  ‚Ñ±.stalk_pushforward C (ùüô X) x = (stalk_functor C x).map ((pushforward.id ‚Ñ±).hom) :=
begin
  dsimp [stalk_pushforward, stalk_functor],
  ext1,
  tactic.op_induction',
  cases j, cases j_val,
  rw [colimit.Œπ_map_assoc, colimit.Œπ_map, colimit.Œπ_pre, whisker_left_app, whisker_right_app,
       pushforward.id_hom_app, eq_to_hom_map, eq_to_hom_refl],
  dsimp,
  -- FIXME A simp lemma which unfortunately doesn't fire:
  erw [category_theory.functor.map_id],
end

-- This proof is sadly not at all robust:
-- having to use `erw` at all is a bad sign.
@[simp] lemma comp (‚Ñ± : X.presheaf C) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (x : X) :
  ‚Ñ±.stalk_pushforward C (f ‚â´ g) x =
  ((f _* ‚Ñ±).stalk_pushforward C g (f x)) ‚â´ (‚Ñ±.stalk_pushforward C f x) :=
begin
  dsimp [stalk_pushforward, stalk_functor],
  ext U,
  op_induction U,
  cases U,
  cases U_val,
  simp only [colimit.Œπ_map_assoc, colimit.Œπ_pre_assoc,
             whisker_right_app, category.assoc],
  dsimp,
  -- FIXME: Some of these are simp lemmas, but don't fire successfully:
  erw [category_theory.functor.map_id, category.id_comp, category.id_comp, category.id_comp,
       colimit.Œπ_pre, colimit.Œπ_pre],
  refl,
end

end stalk_pushforward

variables {C}

/--
The induced map of a morphism `f : F ‚ü∂ G` of presheaves on the stalks
-/
def stalk_map (x : X) {F G : X.presheaf C} (f : F ‚ü∂ G): F.stalk x ‚ü∂ G.stalk x :=
(stalk_functor C x).map f

namespace stalk_map

@[simp, reassoc] lemma germ_comp {F G : X.presheaf C} (U : opens X) (x : U) (f : F ‚ü∂ G) :
  germ F x ‚â´ stalk_map x.1 f = f.app (op U) ‚â´ germ G x :=
colimit.Œπ_map (whisker_left ((open_nhds.inclusion x.1).op) f) (op ‚ü®U, x.2‚ü©)

@[simp] lemma germ_comp_apply (U : opens X) (x : U) {F G : X.presheaf (Type v)} (f : F ‚ü∂ G)
  (s : F.obj (op U)) :
  stalk_map x.1 f (germ F x s) = germ G x (f.app (op U) s) :=
congr_fun (germ_comp U x f) s

@[simp] lemma id (x : X) (F : X.presheaf C) : stalk_map x (ùüô F) = ùüô (stalk F x) :=
(stalk_functor C x).map_id F

@[simp] lemma comp (x : X) {F G H : X.presheaf C} (f : F ‚ü∂ G) (g : G ‚ü∂ H) :
  stalk_map x (f ‚â´ g) = stalk_map x f ‚â´ stalk_map x g :=
(stalk_functor C x).map_comp f g

/-- An isomorphism of sheaves `F ‚âÖ G` induces an isomorphism on the stalks -/
def iso (x : X) {F G : X.presheaf C} (f : F ‚âÖ G) : F.stalk x ‚âÖ G.stalk x :=
(stalk_functor C x).map_iso f

instance is_iso (x : X) {F G : X.presheaf C} (f : F ‚ü∂ G) [is_iso f] : is_iso (stalk_map x f) :=
(stalk_functor C x).map_is_iso f

end stalk_map

open function

lemma stalk_maps_injective_of_app_injective {F G : presheaf (Type v) X} (f : F ‚ü∂ G) :
  (‚àÄ U : opens X, injective (f.app (op U))) ‚Üí (‚àÄ x : X, injective (stalk_map x f)) :=
begin
  intros h_inj x s t hst,
  rcases germ_exist F x s with ‚ü®U‚ÇÅ, hxU‚ÇÅ, s, rfl‚ü©,
  rcases germ_exist F x t with ‚ü®U‚ÇÇ, hxU‚ÇÇ, t, rfl‚ü©,
  rw [stalk_map.germ_comp_apply U‚ÇÅ ‚ü®x,hxU‚ÇÅ‚ü©, stalk_map.germ_comp_apply U‚ÇÇ ‚ü®x,hxU‚ÇÇ‚ü©] at hst,
  obtain ‚ü®W, hxW, iWU‚ÇÅ, iWU‚ÇÇ, heq‚ü© := G.germ_eq x hxU‚ÇÅ hxU‚ÇÇ _ _ hst,
  rw [‚Üê functor_to_types.naturality, ‚Üê functor_to_types.naturality] at heq,
  replace heq := h_inj W heq,
  convert congr_arg (F.germ ‚ü®x,hxW‚ü©) heq,
  exacts [(F.germ_res_apply iWU‚ÇÅ ‚ü®x,hxW‚ü© s).symm,
          (F.germ_res_apply iWU‚ÇÇ ‚ü®x,hxW‚ü© t).symm],
end

/-
Note that the analogous statement for surjectivity is false: Surjectivity on stalks does not
imply surjectivity of the components of a sheaf morphism. However it does imply that the morphism
is an epi, but this fact it not yet formalized.
-/
lemma app_injective_of_stalk_maps_injective {F : sheaf (Type v) X }
  {G : presheaf (Type v) X} (f : F.presheaf ‚ü∂ G) :
  (‚àÄ x : X, injective (stalk_map x f)) ‚Üí (‚àÄ U : opens X, injective (f.app (op U))) :=
begin
  intros h_inj U s t hst,
  apply section_ext,
  intro x,
  apply h_inj x.1,
  rw [stalk_map.germ_comp_apply, stalk_map.germ_comp_apply],
  exact congr_arg _ hst
end

lemma app_injective_iff_stalk_maps_injective {F : sheaf (Type v) X}
  {G : presheaf (Type v) X} (f : F.presheaf ‚ü∂ G) :
  (‚àÄ x : X, injective (stalk_map x f)) ‚Üî (‚àÄ U : opens X, injective (f.app (op U))) :=
‚ü®app_injective_of_stalk_maps_injective f, stalk_maps_injective_of_app_injective f‚ü©

lemma app_bijective_of_stalk_maps_bijective {F G : sheaf (Type v) X} (f : F ‚ü∂ G) :
  (‚àÄ x : X, bijective (stalk_map x f)) ‚Üí (‚àÄ U : opens X, bijective (f.app (op U))) := Œª h_bij U,
begin
  -- We already know that `f.app (op U)` is injective. We save that fact here as we will
  -- need it again later.
  have h_inj := app_injective_of_stalk_maps_injective f (Œª x, (h_bij x).1),
  refine ‚ü®h_inj U, (Œª t,_)‚ü©,
  -- For surjectivity, we are given an arbitrary section `t` and need to find a preimage for it.
  -- First, we show that we can find preimages *locally*. That is, for each `x : U` we construct
  -- neighborhood `V ‚â§ U` and a section `s : F.obj (op V))` such that `f.app (op V) s` and `t`
  -- agree on `V`.
  have exists_local_preim : ‚àÄ x : U, ‚àÉ (V : open_nhds x.1) (iVU : V.1 ‚ü∂ U)
    (s : F.presheaf.obj (op V.1)), f.app (op V.1) s = G.presheaf.map iVU.op t := Œª x, by {
    -- Since `f` is surjective on stalks, we can find a preimage `s‚ÇÄ` of the germ of `t`
    obtain ‚ü®s‚ÇÄ,hs‚ÇÄ‚ü© := (h_bij x).2 (G.presheaf.germ x t),
    -- ... and this preimage must come from some section `s‚ÇÅ`
    obtain ‚ü®V‚ÇÅ,hxV‚ÇÅ,s‚ÇÅ,hs‚ÇÅ‚ü© := F.presheaf.germ_exist x.1 s‚ÇÄ,
    subst hs‚ÇÅ, rename hs‚ÇÄ hs‚ÇÅ,
    erw stalk_map.germ_comp_apply V‚ÇÅ ‚ü®x.1,hxV‚ÇÅ‚ü© f s‚ÇÅ at hs‚ÇÅ,
    -- Now, the germ of `f.app (op V‚ÇÅ) s‚ÇÅ` equals the germ of `t`, hence they must coincide on
    -- some open neighborhood
    obtain ‚ü®V‚ÇÇ,hxV‚ÇÇ, iV‚ÇÇV‚ÇÅ, iV‚ÇÇU, heq‚ü© := G.presheaf.germ_eq x.1 hxV‚ÇÅ x.2 _ _ hs‚ÇÅ,
    -- The restriction of `s‚ÇÅ` to that neighborhood is our desired local preimage
    let s‚ÇÇ := F.presheaf.map iV‚ÇÇV‚ÇÅ.op s‚ÇÅ,
    use [V‚ÇÇ,hxV‚ÇÇ,iV‚ÇÇU,s‚ÇÇ],
    rwa functor_to_types.naturality },
  -- Now, we use the axiom of choice to create a function `local_preim` giving us for each point
  -- `x : U` a neighborhood `V` and a local preimage for `t` on `V`.
  have local_preim : Œ† x : U, Œ£ (V : open_nhds x.1) (iVU : V.1 ‚ü∂ U),
    {s : F.presheaf.obj (op V.1) // f.app (op V.1) s = G.presheaf.map iVU.op t } := Œª x, by {
    choose V iVU s heq using exists_local_preim x,
    exact ‚ü®V,iVU,s,heq‚ü© },
  clear exists_local_preim,
  -- In particular, we obtain a covering family of opens and a family of sections
  let V : U ‚Üí opens X := Œª x, (local_preim x).1.1,
  let sf : Œ† x : U, F.presheaf.obj (op (V x)) := Œª x, (local_preim x).2.2.1,
  have V_cover : U ‚â§ supr V := Œª x hx, by {
    rw [subtype.val_eq_coe, opens.mem_coe, opens.mem_supr],
    exact ‚ü®‚ü®x,hx‚ü©,(local_preim _).1.2‚ü© },
  -- Using this data, we can glue all of the local preimages together, giving us our candidate
  -- for the preimage of `t`
  obtain ‚ü®s, s_spec, -‚ü© := F.exists_unique_gluing' V U (Œª x, (local_preim x).2.1) V_cover sf _,
  use s,
  -- Note that we generated an additional goal: We need to show that our family of sections `sf`
  -- is actually compatible. We get that out of the way first.
  swap,
  { intros x y,
    -- The only thing we know about the sections `sf` is that their image under `f` equals (the
    -- restriction of) `t`. It is at this point that we need injectivity of `f` again!
    apply h_inj,
    -- Here, both sides are equal to a restriction of `t`
    transitivity ;
      erw [functor_to_types.naturality, (local_preim _).2.2.2, ‚Üê functor_to_types.map_comp_apply],
    refl },
  -- The only thing left to prove is that `s` really is a preimage of `t`
  -- Of course, we show the equality locally
  apply G.eq_of_locally_eq' V U (Œª x, (local_preim x).2.1) V_cover,
  intro x,
  convert congr_arg (f.app (op (V x))) (s_spec x),
  exacts [(functor_to_types.naturality _ _ f _ _).symm, (local_preim x).2.2.2.symm],
end

/--
If all the stalk maps of map `f : F ‚ü∂ G` of `Type`-valued sheaves are isomorphisms, then `f` is
an isomorphism.
-/
instance is_iso_of_stalk_maps_iso {F G : sheaf (Type v) X} (f : F ‚ü∂ G)
  [‚àÄ x : X, is_iso (stalk_map x f)] : is_iso f :=
begin
  haveI : is_iso ((induced_functor sheaf.presheaf).map f) :=
  @nat_iso.is_iso_of_is_iso_app _ _ _ _ F.presheaf G.presheaf f (by {
    intro U, op_induction U,
    rw is_iso_iff_bijective,
    exact app_bijective_of_stalk_maps_bijective f (Œª x, (is_iso_iff_bijective _).mp (_inst_3 x)) U,
  }),
  exact is_iso_of_fully_faithful (induced_functor sheaf.presheaf) f,
end


end Top.presheaf
