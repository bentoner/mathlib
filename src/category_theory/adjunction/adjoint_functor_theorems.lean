/-
Copyright (c) 2020 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/
import category_theory.adjunction.basic
import category_theory.limits.shapes
import category_theory.limits.preserves.basic
import category_theory.limits.creates
import category_theory.punit

universes v u

namespace category_theory

variables {J : Type v}
variables {C : Type u} [category.{v} C]

open category limits

section

/-- The type of objects for the diagram indexing a wide (co)equalizer. -/
@[derive decidable_eq, derive inhabited] inductive walking_parallel_chunk (J : Type v) : Type v
| zero : walking_parallel_chunk
| one : walking_parallel_chunk

open walking_parallel_chunk

/-- The type family of morphisms for the diagram indexing a wide (co)equalizer. -/
@[derive decidable_eq] inductive walking_parallel_chunk.hom (J : Type v) :
  walking_parallel_chunk J ‚Üí walking_parallel_chunk J ‚Üí Type v
| id : Œ† X : walking_parallel_chunk.{v} J, walking_parallel_chunk.hom X X
| line : Œ† (j : J), walking_parallel_chunk.hom zero one

open walking_parallel_chunk.hom

/-- Composition of morphisms in the indexing diagram for wide (co)equalizers. -/
def walking_parallel_chunk.hom.comp :
  Œ† (X Y Z : walking_parallel_chunk J)
    (f : walking_parallel_chunk.hom J X Y) (g : walking_parallel_chunk.hom J Y Z),
    walking_parallel_chunk.hom J X Z
  | _ _ _ (id _)   h := h
  | _ _ _ (line j) (id one) := line j.

local attribute [tidy] tactic.case_bash

instance walking_parallel_pair.hom.category  :
  small_category (walking_parallel_chunk J) :=
{ hom  := walking_parallel_chunk.hom J,
  id   := walking_parallel_chunk.hom.id,
  comp := walking_parallel_chunk.hom.comp }

@[simp]
lemma walking_parallel_chunk.hom_id (X : walking_parallel_chunk J) :
  walking_parallel_chunk.hom.id X = ùüô X :=
rfl

/--
`parallel_chunk f` is the diagram in `C` consisting of the family of morphisms, each with
common domain and codomain.
-/
def parallel_chunk {X Y : C} (f : J ‚Üí (X ‚ü∂ Y)) : walking_parallel_chunk J ‚•§ C :=
{ obj := Œª x, walking_parallel_chunk.cases_on x X Y,
  map := Œª x y h, match x, y, h with
  | _, _, (id _) := ùüô _
  | _, _, (line j) := f j
  end,
  map_comp' :=
  begin
    rintro _ _ _ ‚ü®‚ü© ‚ü®‚ü©;
    { unfold_aux, simp; refl },
  end }

lemma trident.is_limit.hom_ext {X Y : C} (f : J ‚Üí (X ‚ü∂ Y)) {s : cone (parallel_chunk f)}
  (hs : is_limit s) {W : C}
  {k l : W ‚ü∂ s.X}
  (h : k ‚â´ fork.Œπ s = l ‚â´ fork.Œπ s) : k = l :=
hs.hom_ext $ fork.equalizer_ext _ h

end

open walking_parallel_chunk

/--
If `C` has (small) limits and a small weakly initial set of objects, then it has an initial object.
-/
lemma has_initial_of_weakly_initial_and_has_limits (C : Type u) [category.{v} C] [has_limits C]
  {Œπ : Type v} (B : Œπ ‚Üí C) (weakly_initial : ‚àÄ (A : C), ‚àÉ i, nonempty (B i ‚ü∂ A)) :
  has_initial C :=
begin
  have fromP : Œ† (X : C), (‚àè B ‚ü∂ X),
  { intro X,
    exact pi.œÄ _ (weakly_initial X).some ‚â´ (weakly_initial X).some_spec.some },
  let endos := ‚àè B ‚ü∂ ‚àè B,
  let F : walking_parallel_chunk endos ‚•§ C := parallel_chunk (id : endos ‚Üí endos),
  let i : limit F ‚ü∂ ‚àè B := limit.œÄ F zero,
  have : mono i,
  { refine ‚ü®Œª T f g eq, _‚ü©,
    apply limit.hom_ext,
    rintro (_ | _),
    apply eq,
    rw ‚Üê limit.w _ (_ : zero ‚ü∂ one),
    rw reassoc_of eq,
    apply hom.line (ùüô _) },
  have : ‚àÄ (X : C), inhabited (limit F ‚ü∂ X),
    intro X,
    refine ‚ü®i ‚â´ fromP X‚ü©,
  resetI,
  have : ‚àÄ (X : C), unique (limit F ‚ü∂ X),
    intro X,
    refine ‚ü®by apply_instance, Œª a, _‚ü©,
    let E := equalizer a (default (limit F ‚ü∂ X)),
    let e : E ‚ü∂ limit F := equalizer.Œπ _ _,
    let h : ‚àè B ‚ü∂ E := fromP _,
    have : ((i ‚â´ h) ‚â´ e) ‚â´ i = i ‚â´ ùüô _,
      rw category.assoc,
      rw category.assoc,
      erw limit.w F (hom.line (h ‚â´ e ‚â´ i)),
      erw limit.w F (hom.line (ùüô _)),
    rw [category.comp_id, cancel_mono_id i] at this,
    haveI : split_epi e := ‚ü®i ‚â´ h, this‚ü©,
    rw ‚Üê cancel_epi e,
    apply equalizer.condition,
  exactI has_initial_of_unique (limit F),
end

/--
The functor `G : D ‚•§ C` satisfies the *solution set condition* if for every `A : C`, there is a
family of morphisms `{f_i : A ‚ü∂ G (B_i) // i ‚àà Œπ}` such that given any morphism `h : A ‚ü∂ G X`,
there is some `i ‚àà Œπ` such that `h` factors through `f_i`.

The key part of this definition is that the indexing set `Œπ` lives in `Type v`, where `v` is the
universe of morphisms of the category: this is the "smallness" condition which allows the general
adjoint functor theorem to go through.
-/
def solution_set_condition {D : Type u} [category.{v} D] (G : D ‚•§ C) : Prop :=
  ‚àÄ (A : C), ‚àÉ (Œπ : Type v) (B : Œπ ‚Üí D) (f : Œ† (i : Œπ), A ‚ü∂ G.obj (B i)),
  ‚àÄ X (h : A ‚ü∂ G.obj X), ‚àÉ (i : Œπ) (g : B i ‚ü∂ X), f i ‚â´ G.map g = h

variables {D : Type u} [category.{v} D]

-- TODO: Move this to category_theory/comma.lean
instance (G : D ‚•§ C) (A : C) : faithful (comma.snd (functor.from_punit A) G) := {}.

-- TODO: Move this to category_theory/comma.lean
instance comma_reflects_isos (G : D ‚•§ C) (A : C) :
  reflects_isomorphisms (comma.snd (functor.from_punit A) G) :=
{ reflects := Œª X Y f i, by exactI
  { inv :=
    { left := eq_to_hom (subsingleton.elim _ _),
      right := inv ((comma.snd (functor.from_punit A) G).map f),
      w' :=
      begin
        dsimp,
        simp only [id_comp, is_iso.comp_is_iso_eq],
        rw ‚Üê f.w,
        dsimp,
        simp,
      end } } }

section create

variables [small_category J] (G : D ‚•§ C) [preserves_limits_of_shape J G]
variables (A : C) (F : J ‚•§ comma (functor.from_punit A) G)
variables (c : cone (F ‚ãô comma.snd _ G)) (t : is_limit c)

def new_cone : cone ((F ‚ãô comma.snd _ _) ‚ãô G) :=
{ X := A,
  œÄ :=
  { app := Œª j, (F.obj j).hom,
    naturality' := Œª j‚ÇÅ j‚ÇÇ Œ±, (F.map Œ±).w } }

-- TODO: dualise and move to category_theory/limits/comma.lean
def four_ten_aux : creates_limit F (comma.snd (functor.from_punit A) G) :=
creates_limit_of_reflects_iso $ Œª c t,
{ lifted_cone :=
  { X :=
    { left := ‚ü®‚ü©,
      right := c.X,
      hom := (is_limit_of_preserves G t).lift (new_cone G A F) },
    œÄ :=
    { app := Œª j,
      { left := eq_to_hom (subsingleton.elim _ _),
        right := c.œÄ.app j,
        w' :=
        begin
          change ùüô A ‚â´ (F.obj j).hom = _,
          rw id_comp,
          apply ((is_limit_of_preserves G t).fac (new_cone G A F) j).symm,
        end },
      naturality' := Œª j‚ÇÅ j‚ÇÇ Œ±,
      begin
        ext,
        apply c.œÄ.naturality Œ±,
      end } },
  valid_lift :=
  begin
    refine cones.ext (iso.refl _) _,
    intro j,
    dsimp,
    simp,
  end,
  makes_limit :=
  { lift := Œª c',
    { left := eq_to_hom (subsingleton.elim _ _),
      right :=
      begin
        apply t.lift ‚ü®_, Œª j, _, _‚ü©,
        { apply (c'.œÄ.app j).right },
        { intros j‚ÇÅ j‚ÇÇ Œ±,
          rw ‚Üê c'.w Œ±,
          dsimp,
          simp },
      end,
      w' :=
      begin
        dsimp,
        rw id_comp,
        symmetry,
        refine (is_limit_of_preserves G t).uniq (new_cone G A F) _ _,
        intro j,
        dsimp [new_cone],
        rw [assoc, ‚Üê G.map_comp],
        simp only [is_limit.fac],
        apply (c'.œÄ.app j).w.symm.trans _,
        dsimp,
        simp,
      end },
    fac' := Œª c' j,
    begin
      ext,
      dsimp,
      apply t.fac,
    end,
    uniq' := Œª s m w,
    begin
      ext,
      apply t.uniq ‚ü®_, _‚ü© _ _,
      intro j,
      dsimp at *,
      rw ‚Üê w j,
      refl,
    end } }

instance : creates_limits_of_shape J (comma.snd (functor.from_punit A) G) :=
{ creates_limit := Œª F, four_ten_aux G A F }

instance [has_limits_of_shape J D] : has_limits_of_shape J (comma (functor.from_punit A) G) :=
has_limits_of_shape_of_has_limits_of_shape_creates_limits_of_shape
  (comma.snd (functor.from_punit A) G)

end create

-- TODO: move this section somewhere.
-- TODO: consider showing the converse
-- TODO: dualise
-- This section proves that if each comma category (A ‚Üì G) has an initial object then `G` has a
-- left adjoint

section initials
noncomputable theory

variables (G : D ‚•§ C)
variables [‚àÄ A, has_initial (comma (functor.from_punit A) G)]

def F : C ‚Üí D := Œª A, (‚ä•_ (comma (functor.from_punit A) G)).right
def Œ∑ (A : C) : A ‚ü∂ G.obj (F G A) := (‚ä•_ (comma (functor.from_punit A) G)).hom

def init_equivalence (A : C) (B : D) :
  (F G A ‚ü∂ B) ‚âÉ (A ‚ü∂ G.obj B) :=
{ to_fun := Œª g, Œ∑ G A ‚â´ G.map g,
  inv_fun := Œª f,
  begin
    let B' : comma (functor.from_punit A) G := { right := B, hom := f },
    apply comma_morphism.right (initial.to B'),
  end,
  left_inv := Œª g,
  begin
    let B' : comma (functor.from_punit A) G :=
      { left := punit.star, right := B, hom := Œ∑ G A ‚â´ G.map g },
    let g' : (‚ä•_ (comma (functor.from_punit A) G)) ‚ü∂ B' :=
      ‚ü®eq_to_hom (subsingleton.elim _ _), g, id_comp _‚ü©,
    have : initial.to _ = g',
    { apply colimit.hom_ext, rintro ‚ü®‚ü© },
    change comma_morphism.right (initial.to B') = _,
    rw this,
  end,
  right_inv := Œª f,
  begin
    let B' : comma (functor.from_punit A) G := { right := B, hom := f },
    apply (comma_morphism.w (initial.to B')).symm.trans _,
    dsimp,
    simp,
  end }

def init_to_adj :=
adjunction.left_adjoint_of_equiv (init_equivalence G) $
begin
  intros X Y Y' g h,
  dsimp [init_equivalence],
  simp,
end

def is_right_adjoint_of_initials : is_right_adjoint G :=
{ left := init_to_adj G,
  adj := adjunction.adjunction_of_equiv_left _ _ }
end initials

section gaft

variables (G : D ‚•§ C) [has_limits D] [preserves_limits G]

/--
The general adjoint functor theorem says that if `G : D ‚•§ C` preserves limits and `D` has them,
then `G` is a right adjoint.

Strictly speaking, it also gives the converse: if `G : D ‚•§ C` is a right adjoint then `G` preserves
them and it satisfies the solution set condition; though this version is not shown here.
-/
noncomputable def gaft (hG : solution_set_condition G) : is_right_adjoint G :=
begin
  apply is_right_adjoint_of_initials _,
  intro A,
  specialize hG A,
  choose Œπ B f g hg‚ÇÅ hg‚ÇÇ using hG,
  apply gaft_aux _ _ _,
  { refine ‚ü®_‚ü©,
    introsI J ùí•,
    apply_instance },
  { apply Œπ },
  { intro i,
    refine ‚ü®‚ü®‚ü©, _, f i‚ü© },
  { intro L,
    refine ‚ü®g _ L.hom, ‚ü®_‚ü©‚ü©,
    refine ‚ü®eq_to_hom (subsingleton.elim _ _), hg‚ÇÅ _ _, _‚ü©,
    dsimp,
    rw [hg‚ÇÇ, id_comp] }
end

end gaft

end category_theory
