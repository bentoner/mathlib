/-
Copyright (c) 2021 David W√§rn. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: David W√§rn
-/
import category_theory.action
import category_theory.is_connected
import combinatorics.quiver
import group_theory.free_group
import group_theory.semidirect_product
/-!
# The Nielsen-Schreier theorem

This file proves that a subgroup of a free group is itself free.

## Main definitions

- `is_free_group G`: a class expressing that `G` has the universal property of a free group.
- `subgroup_is_free_of_free H`: an instance saying that a subgroup of a free group is free.

## Proof overview

The proof is analogous to the proof using covering spaces and fundamental groups of graphs,
but we work directly with groupoids instead of topological spaces. Under this analogy,

- `is_free_groupoid G` corresponds to saying that a space is a graph.
- `End_mul_equiv_subgroup H` plays the role of replacing 'subgroup of fundamental group' with
  'fundamental group of covering space'.
- `action_category_is_free G A` corresponds to the fact that a covering of a (single-vertex)
  graph is a graph.
- `End_is_free_group_of_arborescence` corresponds to the fact that, given a spanning tree of a
  graph, its fundamental group is free (generated by loops from the complement of the tree).

## Implementation notes

This proof works with the universal property `is_free_group` instead of the concrete description
`free_group A` of free groups. The two are related by `free_group_is_free_group` and
`iso_free_group_of_is_free_group`.

Our definition of `is_free_groupoid` is nonstandard. Normally one would require that functors
`G ‚•§ X` to any _groupoid_ `X` are given by graph homomorphisms from the generators, but we only
consider _groups_ `X`. This simplifies the argument since functor equality is complicated in
general, but simple for functors to single object categories.

## References

https://ncatlab.org/nlab/show/Nielsen-Schreier+theorem

## Tags

free group, Nielsen-Schreier

-/

noncomputable theory
open_locale classical
universes v u

open category_theory category_theory.action_category semidirect_product

/-- `is_free_group G` means that `G` has the universal property of a free group.
    That is, it has a family `generators G` of elements, such that a group homomorphism
    `G ‚Üí* X` is uniquely determined by a function `generators G ‚Üí X`. -/
class is_free_group (G) [group.{u} G] :=
(generators : Type u)
(of : generators ‚Üí G)
(unique_lift : ‚àÄ {X} [group.{u} X] (f : generators ‚Üí X),
                ‚àÉ! F : G ‚Üí* X, ‚àÄ a, F (of a) = f a)

instance free_group_is_free_group {A} : is_free_group (free_group A) :=
{ generators := A,
  of := free_group.of,
  unique_lift := begin
    introsI X _ f,
    exact ‚ü®free_group.lift f,
      Œª _, free_group.lift.of,
      Œª g hg, monoid_hom.ext (Œª _, free_group.lift.unique g hg)‚ü©
  end }

namespace is_free_group

lemma end_is_id {G} [group G] [is_free_group G] (f : G ‚Üí* G)
  (h : ‚àÄ a, f (of a) = of a) : ‚àÄ g, f g = g :=
let ‚ü®_, _, u‚ü© := unique_lift (f ‚àò of) in
have claim : f = monoid_hom.id G := trans (u _ (Œª _, rfl)) (u _ (by simp [h])).symm,
monoid_hom.ext_iff.mp claim

/-- An abstract free group is isomorphic to a concrete free group. -/
def iso_free_group_of_is_free_group (G) [group G] [is_free_group G] :
  G ‚âÉ* free_group (generators G) :=
let ‚ü®F, hF, uF‚ü© := classical.indefinite_description _ (unique_lift free_group.of) in
{ to_fun := F,
  inv_fun := free_group.lift of,
  left_inv := end_is_id ((free_group.lift of).comp F) (by simp [hF]),
  right_inv := begin
    have : F.comp (free_group.lift of) = monoid_hom.id _,
    { apply free_group.ext_hom, simp [hF] },
    rwa monoid_hom.ext_iff at this,
  end,
  map_mul' := F.map_mul }

/-- Being a free group transports across group isomorphisms. -/
def of_mul_equiv {G H : Type u} [group G] [group H] (h : G ‚âÉ* H) [is_free_group G] :
  is_free_group H :=
{ generators := generators G,
  of := h ‚àò of,
  unique_lift := begin
    introsI X _ f,
    rcases unique_lift f with ‚ü®F, hF, uF‚ü©,
    refine ‚ü®F.comp h.symm.to_monoid_hom, _, _‚ü©,
    { simp only [hF, mul_equiv.coe_to_monoid_hom, mul_equiv.symm_apply_apply,
      implies_true_iff, eq_self_iff_true, function.comp_app, monoid_hom.coe_comp] },
    intros F' hF',
    suffices : F'.comp h.to_monoid_hom = F,
    { rw ‚Üêthis, ext, simp only [mul_equiv.apply_symm_apply, mul_equiv.coe_to_monoid_hom,
      function.comp_app, monoid_hom.coe_comp]},
    apply uF,
    simp only [hF', mul_equiv.coe_to_monoid_hom, implies_true_iff, eq_self_iff_true,
      function.comp_app, monoid_hom.coe_comp],
  end }

end is_free_group

/-- A groupoid `G` is free when we have the following data:
 - a quiver `generators` whose vertices are objects of `G`
 - a function `of` sending an arrow in `generators` to a morphism in `G`
 - such that a functor from `G` to any group `X` is uniquely determined
   by assigning labels in `X` to the arrows in `generators.

   This definition is nonstandard. Normally one would require that functors `G ‚•§ X`
   to any _groupoid_ `X` are given by graph homomorphisms from `generators`. -/
class is_free_groupoid (G) [groupoid.{v} G] :=
(generators : quiver.{v+1} G)
(of : Œ† ‚¶Éa b‚¶Ñ, generators.arrow a b ‚Üí (a ‚ü∂ b))
(unique_lift : ‚àÄ {X} [group.{v} X] (f : generators.labelling X),
                ‚àÉ! F : G ‚•§ single_obj X, ‚àÄ a b (g : generators.arrow a b),
                  F.map (of g) = f g)

namespace is_free_groupoid

@[ext]
lemma ext_functor {G X} [groupoid.{v} G] [is_free_groupoid G] [group.{v} X]
  (f g : G ‚•§ single_obj X)
  (h : ‚àÄ a b (e : generators.arrow a b), f.map (of e) = g.map (of e)) :
  f = g :=
let ‚ü®_, _, um‚ü© := unique_lift (show generators.labelling X, from Œª a b e, g.map (of e)) in
trans (um _ h) (um _ (Œª _ _ _, rfl)).symm

namespace covering

open is_free_group as fgp

instance action_category_is_free {G A : Type u} [group G] [is_free_group G] [mul_action G A] :
  is_free_groupoid (action_category G A) :=
{ generators := ‚ü®Œª a b, { e : fgp.generators G // fgp.of e ‚Ä¢ a.back = b.back }‚ü©,
  of := Œª a b e, ‚ü®fgp.of e, e.property‚ü©,
  unique_lift := begin
    introsI X _ f,
    let f' : fgp.generators G ‚Üí (A ‚Üí X) ‚ãä[mul_aut_arrow] G :=
      Œª e, ‚ü®Œª b, @f (_ : A) b ‚ü®e, smul_inv_smul _ b‚ü©, fgp.of e‚ü©,
    rcases fgp.unique_lift f' with ‚ü®F', hF', uF'‚ü©,
    refine ‚ü®uncurry F' _, _, _‚ü©,
    { apply fgp.end_is_id (right_hom.comp F'),
      intro,
      rw [monoid_hom.comp_apply, hF'],
      refl },
    { rintros ‚ü®‚ü®‚ü©, a : A‚ü© ‚ü®‚ü®‚ü©, b‚ü© ‚ü®e, h : fgp.of e ‚Ä¢ a = b‚ü©,
      change (F' (fgp.of _)).left _ = _,
      rw hF',
      cases (inv_smul_eq_iff.mpr h.symm),
      refl },
    { intros E hE,
      have : curry E = F',
      { apply uF',
        intro e,
        ext,
        { exact hE _ _ ‚ü®e, _‚ü© },
        { refl } },
      apply functor.hext,
      { intro, apply unit.ext },
      { refine action_category.cases _, intros,
        simp only [‚Üêthis, uncurry_map, curry_apply_left, coe_back, hom_of_pair.val] } },
  end }

end covering

section retract
open quiver

-- an abbreviation for taking the quiver corresponding to a subquiver
local notation T `‚ôØ` :10000 := T.quiver

variables {G : Type u} [groupoid.{u} G] [is_free_groupoid G]
  (T : wide_subquiver (generators.symmetrify : quiver G)) [arborescence T‚ôØ]

/-- A path in the tree gives a hom, by composition. -/
noncomputable def hom_of_path : Œ† {a : G}, T‚ôØ.path T‚ôØ.root a ‚Üí (T‚ôØ.root ‚ü∂ a)
| _ path.nil := ùüô _
| a (path.cons p f) := hom_of_path p ‚â´ sum.rec_on f.val (Œª e, of e) (Œª e, inv (of e))

/-- For every vertex `a`, there is a canonical hom from the root, given by the
    path in the tree. -/
def tree_hom (a : G) : T‚ôØ.root ‚ü∂ a := hom_of_path T (default _)

lemma tree_hom_eq {a : G} (p : T‚ôØ.path T‚ôØ.root a) : tree_hom T a = hom_of_path T p :=
by rw [tree_hom, unique.default_eq]

@[simp] lemma tree_hom_root : tree_hom T T‚ôØ.root = ùüô _ :=
by rw [tree_hom_eq T path.nil, hom_of_path]

/-- Any hom in `G` can be made into a loop, by conjugating with `tree_hom`s. -/
@[simp] def loop_of_hom {a b : G} (p : a ‚ü∂ b) : End T‚ôØ.root :=
tree_hom T a ‚â´ p ‚â´ inv (tree_hom T b)

lemma loop_of_hom_eq_id {a b : G} {e : generators.arrow a b} :
  (sum.inl e) ‚àà T a b ‚à® (sum.inr e) ‚àà T b a
    ‚Üí loop_of_hom T (of e) = ùüô _ :=
begin
  rw [loop_of_hom, ‚Üêcategory.assoc, is_iso.comp_inv_eq, category.id_comp],
  rintro (h | h),
  { rw [tree_hom_eq T (path.cons (default _) ‚ü®sum.inl e, h‚ü©), hom_of_path], refl },
  { rw tree_hom_eq T (path.cons (default _) ‚ü®sum.inr e, h‚ü©),
    simp only [hom_of_path, is_iso.inv_hom_id, category.comp_id, category.assoc, tree_hom] }
end

/-- Since a hom gives a loop, a homomorphism from the vertex group at the root
    extends to a functor on the whole groupoid. -/
@[simps] def functor_of_monoid_hom {X} [monoid X] (f : End T‚ôØ.root ‚Üí* X) :
  G ‚•§ single_obj X :=
{ obj := Œª _, (),
  map := Œª a b p, f (loop_of_hom T p),
  map_id' := begin
    intro a,
    rw [loop_of_hom, category.id_comp, is_iso.hom_inv_id, ‚ÜêEnd.one_def,
      f.map_one, single_obj.id_as_one],
 end,
  map_comp' := begin
    intros,
    rw [single_obj.comp_as_mul, ‚Üêf.map_mul],
    simp only [is_iso.inv_hom_id_assoc, loop_of_hom, End.mul_def, category.assoc]
  end }

/-- Given a free groupoid and an arborescence of its generating quiver, the vertex
    group at the root is freely generated by loops coming from generating arrows
    in the complement of the tree. -/
def End_is_free_group_of_arborescence : is_free_group (End T‚ôØ.root) :=
{ generators := set.compl (wide_subquiver_equiv_set_total $ wide_subquiver_symmetrify T),
  of := Œª e, loop_of_hom T (of e.val.arrow),
  unique_lift := begin
    introsI X _ f,
    let f' : (generators : quiver G).labelling X := Œª a b e,
      if h : sum.inl e ‚àà T a b ‚à® sum.inr e ‚àà T b a then 1
      else f ‚ü®‚ü®a, b, e‚ü©, h‚ü©,
    rcases unique_lift f' with ‚ü®F', hF', uF'‚ü©,
    refine ‚ü®F'.map_End _, _, _‚ü©,
    { suffices : ‚àÄ {x y} (q : x ‚ü∂ y), F'.map (loop_of_hom T q) = (F'.map q : X),
      { rintro ‚ü®‚ü®a, b, e‚ü©, h‚ü©,
        rw [F'.map_End_apply T‚ôØ.root, this, hF'],
        exact dif_neg h },
      intros,
      suffices : ‚àÄ {a} (p : T‚ôØ.path T‚ôØ.root a), F'.map (hom_of_path T p) = 1,
      { simp only [this, tree_hom, single_obj.comp_as_mul, single_obj.inv_as_inv, loop_of_hom,
        one_inv, mul_one, one_mul, functor.map_inv, functor.map_comp] },
      intros a p, induction p with b c p e ih,
      { rw [hom_of_path, F'.map_id, single_obj.id_as_one] },
      rw [hom_of_path, F'.map_comp, single_obj.comp_as_mul, ih, mul_one],
      rcases e with ‚ü®e | e, eT‚ü©,
      { rw hF', exact dif_pos (or.inl eT) },
      { rw [F'.map_inv, single_obj.inv_as_inv, inv_eq_one, hF'],
        exact dif_pos (or.inr eT) } },
    { intros E hE,
      ext,
      suffices : (functor_of_monoid_hom T E).map x = F'.map x,
      { simpa only [loop_of_hom, functor_of_monoid_hom_map, is_iso.inv_id, tree_hom_root,
          category.id_comp, category.comp_id] using this },
      congr,
      apply uF',
      intros a b e,
      change E (loop_of_hom T _) = dite _ _ _,
      split_ifs,
      { rw [loop_of_hom_eq_id T h, ‚ÜêEnd.one_def, E.map_one] },
      { exact hE ‚ü®‚ü®a, b, e‚ü©, h‚ü© } }
  end }

end retract

open is_free_groupoid quotient_group quiver

instance generators_connected (G) [groupoid.{u u} G] [is_connected G] [is_free_groupoid G] (r : G) :
  (generators : quiver G).symmetrify.rooted_connected r :=
begin
  refine ‚ü®Œª b, _‚ü©,
  rw [‚Üêquiver.weakly_connected_component.eq, ‚Üêfree_group.of_injective.eq_iff, ‚Üêmul_inv_eq_one],
  rcases category_theory.nonempty_hom_of_connected_groupoid b r with ‚ü®p‚ü©,
  let X := free_group (generators : quiver G).weakly_connected_component,
  let f : G ‚Üí X := Œª g, free_group.of ‚Üëg,
  let F : G ‚•§ single_obj X := single_obj.difference_functor f,
  change F.map p = ((category_theory.functor.const G).obj ()).map p,
  congr, ext,
  rw [functor.const.obj_map, single_obj.id_as_one,
    single_obj.difference_functor_map, mul_inv_eq_one],
  apply congr_arg free_group.of,
  rw quiver.weakly_connected_component.eq,
  exact ‚ü®quiver.arrow.to_path (sum.inr e)‚ü©,
end

instance End_is_free_group_of_connected_free {G} [groupoid G] [is_connected G] [is_free_groupoid G]
  (r : G) : is_free_group (End r) :=
End_is_free_group_of_arborescence (quiver.geodesic_subtree _ r)

/-- The Nielsen-Schreier theorem: a subgroup of a free group is free. -/
instance subgroup_is_free_of_free {G} [group.{u} G] [is_free_group G]
  (H : subgroup G) : is_free_group H :=
is_free_group.of_mul_equiv (End_mul_equiv_subgroup H)

end is_free_groupoid
