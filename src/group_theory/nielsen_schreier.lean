/-
Copyright (c) 2021 David Wärn. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: David Wärn
-/
import category_theory.action
import group_theory.free_group
import group_theory.semidirect_product
import combinatorics.quiver
/-!
# The Nielsen-Schreier theorem

This file will eventually prove that a subgroup of a free group is itself free.

## Proof sketch

The proof is analogous to the classical proof in terms of fundamental groups of graphs,
but we work directly with groupoids instead of spaces. The main steps are as follows

- Given a subgroup `H` of a free group `G`, observe that `H` is the stabilizer of `1H` in
  the action of `G` on `G / H`. Moreover, whenever `G` acts on a set `A`, there is a
  corresponding action groupoid (with object set `A`), and stabilizers are precisely
  vertex groups in this groupoid. (This corresponds to the observation that `H` is a
  fundamental group in a certain covering space.)

- Say a groupoid `G` is _freely generated_ by a family `D` of morphisms if defining a functor
  from `G` to a group `X` is equivalent to assigning a value in `X` to every morphism in `D`.
  (Free groupoids play the same role as topological graphs.)

- Show that if a free group `G` acts on a set `A`, then the corresponding action groupoid is
  freely generated by morphisms lying above generators of `G`. To prove this, we show that
  functors from the action groupoid to a group `X` correspond to group homomorphism
  from `G` to the semidirect product `G ⋉ (A → X)`. (This corresponds to the fact that
  a covering space of a graph is a graph.)

- Show that if a groupoid `G` is freely generated by `D` and `D` has a spanning tree `T`,
  then a vertex group in `G` is freely generated by certain elements coming from
  the complement of `T`. (This corresponds to retracting `T` to a point.)

This finishes the proof, modulo finding an appropriate rooted subtree.
-/

noncomputable theory
open_locale classical
universes v u

open category_theory opposite category_theory.action_category semidirect_product

/-- `is_free_group G` means that `G` has the universal property of a free group.
    That is, it has a family `generators G` of elements, such that a group homomorphism
    `G →* X` is uniquely determined by a function `generators G → X`. -/
class is_free_group (G) [group.{u} G] :=
(generators : Type u)
(of : generators → G)
(unique_lift : ∀ {X} [group.{u} X] (f : generators → X),
                ∃! F : G →* X, ∀ a, F (of a) = f a)

instance {A} : is_free_group (free_group A) :=
{ generators := A,
  of := free_group.of,
  unique_lift := by { introsI X _ f, exact ⟨free_group.lift f, λ _, free_group.lift.of,
      λ g hg, monoid_hom.ext (λ _, free_group.lift.unique g hg)⟩ } }

namespace is_free_group

lemma end_is_id {G} [group G] [is_free_group G] (f : G →* G)
  (h : ∀ a, f (of a) = of a) : ∀ g, f g = g :=
let ⟨_, _, u⟩ := unique_lift (f ∘ of) in
have claim : f = monoid_hom.id G := (u _ (λ _, rfl)).trans (u _ (by simp [h])).symm,
monoid_hom.ext_iff.mp claim

/-- An abstract free group is isomorphic to a concrete free group. -/
noncomputable def iso_free_group_of_is_free_group (G) [group G] [is_free_group G] :
  G ≃* free_group (generators G) :=
let ⟨F, hF, uF⟩ := classical.indefinite_description _ (unique_lift free_group.of) in
{ to_fun := F,
  inv_fun := free_group.lift of,
  left_inv := end_is_id ((free_group.lift of).comp F) (by simp [hF]),
  right_inv := by { suffices : F.comp (free_group.lift of) = monoid_hom.id _,
    { rwa monoid_hom.ext_iff at this }, apply free_group.ext_hom, simp [hF] },
  map_mul' := F.map_mul }

/-- Being a free group transports across group isomorphisms. -/
def of_mul_equiv {G H} [group G] [group H] (h : G ≃* H) [is_free_group G] : is_free_group H :=
{ generators := generators G,
  of := h ∘ of,
  unique_lift := begin
    introsI X _ f,
    rcases unique_lift f with ⟨F, hF, uF⟩,
    refine ⟨F.comp h.symm.to_monoid_hom, by simp [hF], _⟩,
    intros F' hF',
    suffices : F'.comp h.to_monoid_hom = F,
    { rw ←this, ext, simp },
    apply uF,
    simp [hF'],
  end }

end is_free_group

/-- A groupoid `G` is free when we have the following data:
 - a quiver `generators G` whose vertices are objects of `G`
 - a function `of` sending an arrow in `generators G` to a morphism in `G`
 - such that a functor from `G` to any group `X` is uniquely determined
   by assigning labels in `X` to the vertices of `X`. -/
class is_free_groupoid (G) [groupoid.{v} G] :=
(generators : quiver.{v+1} G)
(of : Π ⦃a b⦄, generators.arrow a b → (a ⟶ b))
(unique_lift : ∀ {X} [group.{v} X] (f : generators.labelling X),
                ∃! F : G ⥤ single_obj X, ∀ a b (g : generators.arrow a b),
                  F.map (of g) = f g)

namespace is_free_groupoid

namespace covering

instance {G A X : Type*} [monoid G] [mul_action G A] : mul_action Gᵒᵖ (A → X) :=
{ smul := λ g' F a, F (g'.unop • a),
  one_smul := by simp,
  mul_smul := by simp [mul_smul] }

@[simp] lemma arrow_action_apply {G A X : Type*} [monoid G] [mul_action G A]
  (g : Gᵒᵖ) (F : A → X) (a : A) : (g • F) a = F (g.unop • a) := rfl

/-- Given groups `G X` with `G` acting on `A`,
    `Gᵒᵖ` acts by multiplicative automorphisms on `A → X`. -/
def mul_aut_of_action (G A X) [group G] [mul_action G A] [has_mul X] :
  Gᵒᵖ →* mul_aut (A → X) :=
{ to_fun := λ g, {
    to_fun := λ F, g • F,
    inv_fun := λ F, g⁻¹ • F,
    left_inv := λ F, inv_smul_smul g F,
    right_inv := λ F, smul_inv_smul g F,
    map_mul' := by { intros, funext, simp only [arrow_action_apply, pi.mul_apply]} },
  map_one' := by { ext, simp only [mul_aut.one_apply, mul_equiv.coe_mk, one_smul]},
  map_mul' := by {intros, ext, simp only [mul_smul, mul_equiv.coe_mk, mul_aut.mul_apply] } }

@[simp] lemma mul_aut_of_action_apply {G A X : Type*} [group G] [mul_action G A] [has_mul X]
  (g : Gᵒᵖ) (F : A → X) (a : A) : mul_aut_of_action G A X g F a = F (g.unop • a) := rfl

/-- A group homomorphisms `G →* Hᵒᵖ` is the sa-/
def hom_op_equiv_op_hom {G H} [monoid G] [monoid H] :
  (G →* Hᵒᵖ) ≃ (Gᵒᵖ →* H) :=
{ to_fun := λ f, { to_fun := λ g', (f g'.unop).unop,
    map_one' := by simp, map_mul' := by simp },
  inv_fun := λ f, { to_fun := λ g, op (f (op g)),
    map_one' := by simp, map_mul' := by simp },
  left_inv := by { intro, ext, simp },
  right_inv := by { intro, ext, simp } }

/-- Given `G` acting on `A`, a functor from the corresponding action groupoid to a group `X`
    can be curried to a group homomorphism `G →* G ⋉ (A → X)`.
    (We simulate `⋉` using `⋊` and lots of `ᵒᵖ`s.) -/
def curry {G A X} [group G] [mul_action G A] [group X]
  (F : action_category G A ⥤ single_obj X) :
  G →* ((A → Xᵒᵖ) ⋊[mul_aut_of_action G A Xᵒᵖ] Gᵒᵖ)ᵒᵖ :=
have F_map_eq : ∀ {a b} {f : a ⟶ b}, F.map f = (F.map (hom_of_pair a.snd f.val) : X) :=
  action_category.cases (λ _ _, rfl),
{ to_fun := λ g, op ⟨λ a, op (F.map (hom_of_pair a g)), op g⟩,
  map_one' := begin
    rw [op_eq_iff_eq_unop, unop_one],
    congr, funext,
    rw [pi.one_apply, op_eq_iff_eq_unop, unop_one],
    exact F_map_eq.symm.trans (F.map_id a),
  end,
  map_mul' := begin
    intros g h,
    rw [op_eq_iff_eq_unop, ←op_mul, unop_op],
    congr, funext,
    rw [op_eq_iff_eq_unop, pi.mul_apply, unop_mul, unop_op],
    exact F_map_eq.symm.trans (F.map_comp (hom_of_pair a h) (hom_of_pair (h • a) g)),
  end }

/-- Given `G` acting on `A`, a group homomorphism `φ : G →* G ⋉ (A → X)` can be uncurried to
    a functor from the action groupoid to `X`, provided that `φ g = (g, _)` for all `g`.
    (We simulate `⋉` using `⋊` and lots of `ᵒᵖ`s.) -/
def uncurry {G A X} [group G] [mul_action G A] [group X]
  (F : G →* ((A → Xᵒᵖ) ⋊[mul_aut_of_action G A Xᵒᵖ] Gᵒᵖ)ᵒᵖ)
  (sane : ∀ g, (F g).unop.right.unop = g) :
  action_category G A ⥤ single_obj X :=
{ obj := λ _, (),
  map := λ a b f, ((F f.val).unop.left a.snd).unop,
  map_id' := by { intro x, rw [action_category.id_val, F.map_one], refl },
  map_comp' := by {
    intros x y z f, revert x y f,
    refine action_category.cases _, intros x g f,
    rw [action_category.comp_val, F.map_mul, unop_mul,
        mul_left, pi.mul_apply, mul_aut_of_action_apply, sane],
    refl } }

open is_free_group as fgp

noncomputable instance {G A} [group G] [is_free_group G] [mul_action G A] :
  is_free_groupoid (action_category G A) :=
{ generators := ⟨λ a b, { e : fgp.generators G // (fgp.of e • a.snd : A) = b.snd }⟩,
  of := λ a b e, ⟨fgp.of e, e.property⟩,
  unique_lift := begin
    introsI X _ f,
    let X' := ((A → Xᵒᵖ) ⋊[mul_aut_of_action G A Xᵒᵖ] Gᵒᵖ)ᵒᵖ,
    let f' : fgp.generators G → X' := λ e, op ⟨λ a, op (@f a (_ : A) ⟨e, rfl⟩), op (fgp.of e)⟩,
    rcases fgp.unique_lift f' with ⟨F', hF', uF'⟩,
    let F : action_category G A ⥤ single_obj X := uncurry F' _,
    refine ⟨F, _, _⟩,
    { rintros ⟨⟨⟩, a : A⟩ ⟨⟨⟩, b⟩ ⟨e, h : fgp.of e • a = b⟩,
      change ((F' (fgp.of _)).unop.left _).unop = _,
      rw hF', cases h, refl },
    { intros E hE,
      let E' := curry E,
      have : E' = F',
      { apply uF',
        intro e,
        refine unop_injective (semidirect_product.ext _ _ _ rfl),
        funext,
        change op (E.map _) = op (f _),
        rw [op_eq_iff_eq_unop, unop_op],
        exact hE _ _ ⟨e, _⟩ },
      apply functor.hext,
      { intro, apply unit.ext },
      { refine action_category.cases _, intros,
        change _ == ((F' _).unop.left _).unop,
        rw ←this, refl } },
    { apply fgp.end_is_id ((hom_op_equiv_op_hom (right_hom : _ →* Gᵒᵖ)).comp F'),
      intro, rw [monoid_hom.comp_apply, hF'], refl }
  end }

end covering

section retract
open quiver

variables {G : Type u} [groupoid.{u} G] [is_free_groupoid G]
  (T : wide_subquiver (generators.symmetrify : quiver G))

-- an abbreviation for taking the quiver corresponding to a subquiver
local notation T `♯` :10000 := T.quiver

variable [arborescence T♯]

/-- A path in the tree gives a hom, by composition. -/
noncomputable def hom_of_path : Π {a : G}, T♯.path T♯.root a → (T♯.root ⟶ a)
| _ path.nil := 𝟙 _
| a (path.cons p ⟨sum.inl e, h⟩) := hom_of_path p ≫ of e
| a (path.cons p ⟨sum.inr e, h⟩) := hom_of_path p ≫ inv (of e)

/-- For every vertex `a`, there is a canonical hom from the root, given by the
    path in the tree. -/
def tree_hom (a : G) : T♯.root ⟶ a := hom_of_path T (default _)

lemma tree_hom_eq {a : G} (p q : T♯.path T♯.root a) : hom_of_path T p = hom_of_path T q :=
by congr

@[simp] lemma tree_hom_root : tree_hom T T♯.root = 𝟙 _ :=
(tree_hom_eq T _ path.nil).trans rfl

/-- Any hom in `G` can be made into a loop, by conjugating with `tree_hom`s. -/
@[simp] def loop_of_hom {a b : G} (p : a ⟶ b) : End T♯.root :=
tree_hom T a ≫ p ≫ inv (tree_hom T b)

lemma loop_of_hom_eq_id {a b : G} {e : generators.arrow a b} :
  (sum.inl e) ∈ T a b ∨ (sum.inr e) ∈ T b a
    → loop_of_hom T (of e) = 𝟙 _ :=
begin
  rw [loop_of_hom, ←category.assoc, is_iso.comp_inv_eq, category.id_comp, tree_hom, tree_hom],
  rintro (h | h),
  { refine eq.trans _ (tree_hom_eq T (path.cons (default _) ⟨sum.inl e, h⟩) _),
    rw hom_of_path },
  { rw tree_hom_eq T (default _) (path.cons (default _) ⟨sum.inr e, h⟩),
    simp only [hom_of_path, is_iso.inv_hom_id, category.comp_id, category.assoc] }
end

/-- Since a hom gives a loop, a homomorphism from the vertex group at the root
    extends to a functor on the whole groupoid. -/
def functor_of_monoid_hom {X} [monoid X] (f : End T♯.root →* X) :
  G ⥤ single_obj X :=
{ obj := λ _, (),
  map := λ a b p, f (loop_of_hom T p),
  map_id' := begin intro a, convert f.map_one, simp end,
  map_comp' := by { intros, rw [single_obj.comp_as_mul, ←f.map_mul],
    simp only [is_iso.inv_hom_id_assoc, loop_of_hom, End.mul_def, category.assoc] } }

@[simp] lemma functor_of_monoid_hom.apply {X} [monoid X] (f : End T♯.root →* X)
  {a b : G} (p : a ⟶ b) : (functor_of_monoid_hom T f).map p = f (loop_of_hom T p) := rfl

/-- Given a free groupoid and an arborescence of its generating quiver, the vertex
    group at the root is freely generated by loops coming from generating arrows
    in the complement of the tree. -/
def End_is_free_group_of_arborescence : is_free_group (End T♯.root) :=
{ generators := set.compl (wide_subquiver_equiv_set_total $ wide_subquiver_symmetrify T),
  of := λ e, loop_of_hom T (of e.val.arrow),
  unique_lift := begin
    introsI X _ f,
    let f' : Π ⦃a b : G⦄, generators.arrow a b → X := λ a b e,
      if h : sum.inl e ∈ T a b ∨ sum.inr e ∈ T b a then 1
      else f ⟨⟨a, b, e⟩, h⟩,
    rcases unique_lift f' with ⟨F', hF', uF'⟩,
    let F : End T♯.root →* X := F'.map_End _,
    have sane : ∀ {a b} (p : a ⟶ b), (functor_of_monoid_hom T F).map p = F'.map p,
    { intros a b p,
      change F'.map _ = _,
      suffices : ∀ {a} (p : T♯.path T♯.root a), F'.map (hom_of_path T p) = 1,
      { simp [this, tree_hom, single_obj.comp_as_mul, single_obj.inv_as_inv] },
      intros a p, induction p with b c p e ih,
      { apply F'.map_id },
      rcases e with ⟨e | e, eT⟩,
      { have : f' e = 1 := dif_pos (or.inl eT),
        simp only [hom_of_path, ih, hF', this, single_obj.comp_as_mul, mul_one, F'.map_comp] },
      { have : f' e = 1 := dif_pos (or.inr eT),
        simp [hom_of_path, ih, hF', this, single_obj.comp_as_mul, single_obj.inv_as_inv] } },
    refine ⟨F, _, _⟩,
    { intro e,
      convert sane _,
      rw hF',
      change _ = dite _ _ _,
      convert (dif_neg e.property).symm,
      apply congr_arg, ext; refl },
    { intros E hE,
      have : functor_of_monoid_hom T E = F',
      { apply uF',
        intros a b e,
        change E (loop_of_hom T _) = dite _ _ _,
        split_ifs,
        { rw loop_of_hom_eq_id T h, apply E.map_one },
        exact hE ⟨⟨a, b, e⟩, h⟩ },
      ext,
      have : (functor_of_monoid_hom T E).map x = (functor_of_monoid_hom T F).map x,
      { rw [this, sane] },
      simpa using this }
  end }

end retract

end is_free_groupoid
